# dbd config
DBD_DATABASE_ID=database_name
DBD_API_KEY=randomkeyhere
DBD_URL=https://url.domain.com/guid/
DBD_CONNECTION_ID=main

# tables whose *records* should not be included in the cloned database, separated by commas
EXCLUDED_TABLES="table_to_exclude"

# what should be done with the copied database
# one of: 
# (1) local - downloads a copy of the database and creates a replica on this machine
# (2) docker - downloads a copy of the database, spins a new docker instance and restored the db inside
# (3) backup - downloads a copy of the database within a chosen location
# (4) remote - downloads a copy of the database and restores it on a remote machine
DESTINATION_TARGET="docker"

# destination Mysql credentials
# this is required for local / docker / remote / cloud / backup targets
DESTINATION_DB_USER=root
DESTINATION_DB_PASS='my-secret-pw' # in single quotes for escaping special characters

# optional, you can force new database clones to have a name you set below
# WARNING (!!!) - this will first drop the database you specify below, and then recreate it
# use with caution
DATABASE_NAME=

# `docker` config (if selected above)
# TAG to use, for mysql, get it from https://hub.docker.com/_/mysql?tab=tags&page=1&ordering=last_updated
# Examples: mysql:latest | mysql:5.7 | mysql:5.6 | mysql:5.5
DOCKER_TAG="mysql:5.7"
# should we spin a new docker instance?
DOCKER_NEW_INSTANCE=true
# if not spinning a new instance, specify the one to use
DOCKER_EXISTING_INSTANCE_NAME="mysql-5-7" 

# `backup` config (if selected above)
# path where gzip files will be stored
BACKUP_PATH=/backup/path/

# (4) `remote` config (if selected above)
# we'll assume you can ssh into this box via ssh keys
REMOTE_USER="vagrant"
REMOTE_IP="192.168.10.10"

CLOUD_HOSTNAME="aurora-fully-qualified-hostname"